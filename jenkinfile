    pipeline {
        agent any
        environment {
            DOCKER_REGISTRY = '172.21.0.3:8082'
            DOCKER_IMAGE_PREFIX = 'example-voting-app'
            DEPLOY_LOG = 'deploy_log.txt'
            DOCKER_FILES_REPO = 'https://github.com/gerardo-lopez-dev-gh/docker-files.git'
            DOCKER_FILES_DIR = 'docker-files'
            APP_REPO = 'https://github.com/gerardo-lopez-dev-gh/example-voting-app.git'
            APP_DIR = 'example-voting-app'
            LOGSTASH_HOST = '172.21.0.6' // IP o nombre de host del contenedor Logstash
            LOGSTASH_PORT = 50000
        }
        
        stages {
            stage('Preparar Repositorios') {
                steps {
                    script {
                        logToLogstash('INFO', "Iniciando la preparación del repositorio en ${env.APP_DIR}")
                        cloneOrUpdateRepo(APP_DIR, APP_REPO)
                        logToLogstash('INFO', "Clonación/actualización de ${env.APP_DIR} finalizada con éxito")
                        
                        logToLogstash('INFO', "Iniciando clonación/actualización de ${env.DOCKER_FILES_DIR}")
                        cloneOrUpdateRepo(DOCKER_FILES_DIR, DOCKER_FILES_REPO)
                        logToLogstash('INFO', "Clonación/actualización de ${env.DOCKER_FILES_DIR} finalizada con éxito")
                    }
                }
            }
        }
    }

    // Funciones auxiliares
    def cloneOrUpdateRepo(repoDir, repoUrl) {
        withCredentials([usernamePassword(credentialsId: 'github-credentials-id', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
            if (fileExists(repoDir)) {
                if (fileExists("${repoDir}/.git")) {
                    dir(repoDir) {
                        sh 'git pull origin main'
                    }
                } else {
                    sh "rm -rf ${repoDir}"
                    sh "git clone ${repoUrl} ${repoDir}"
                }
            } else {
                sh "git clone ${repoUrl} ${repoDir}"
            }
        }
    }

    def logToLogstash(logLevel, message) {
        def timestamp = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
        def logMessage = "{\"timestamp\": \"${timestamp}\", \"level\": \"${logLevel}\", \"message\": \"${message}\"}"
        sh "curl -X POST -H 'Content-Type: application/json' -d '${logMessage}' http://${env.LOGSTASH_HOST}:${env.LOGSTASH_PORT}"
    }
