    pipeline {
        agent any

        environment {
            DEPLOYMENT_ID       = UUID.randomUUID().toString()
            DOCKER_REGISTRY     = '172.21.0.3:8082'
            DOCKER_IMAGE_PREFIX = 'example-voting-app'
            DEPLOY_LOG          = 'deploy_log.txt'
            DOCKER_FILES_REPO   = 'https://github.com/gerardo-lopez-dev-gh/docker-files.git'
            DOCKER_FILES_DIR    = 'docker-files'
            APP_REPO            = 'https://github.com/gerardo-lopez-dev-gh/example-voting-app.git'
            APP_DIR             = 'example-voting-app'
            LOGSTASH_HOST       = '172.21.0.6'
            LOGSTASH_PORT       = 50000
        }

        stages {
            stage('Preparar Repositorios') {
                steps {
                    script {
                        try {
                            logToLogstash('INFO', "Iniciando la preparación del repositorio en ${APP_DIR}")
                            def startTime = System.currentTimeMillis() as long

                            cloneOrUpdateRepo(APP_DIR, APP_REPO)
                            logToLogstash('INFO', "Repositorio ${APP_DIR} preparado con éxito.")

                            cloneOrUpdateRepo(DOCKER_FILES_DIR, DOCKER_FILES_REPO)
                            logToLogstash('INFO', "Repositorio ${DOCKER_FILES_DIR} preparado con éxito.")

                            def endTime = System.currentTimeMillis() as long
                            def formattedDuration = formatTimeDifference(startTime, endTime)
                            logToLogstash('INFO', "Preparación del repositorio completada en ${formattedDuration}")
                        } catch (Exception e) {
                            logToLogstash('ERROR', "Error en la preparación de repositorios: ${e.message}")
                            error("Falló la preparación de repositorios")
                        }
                    }
                }
            }

            stage('Construir Imágenes Docker') {
                steps {
                    script {
                        try {
                            logToLogstash('INFO', "Iniciando la construcción de imágenes Docker")
                            def startTime = System.currentTimeMillis() as long

                            def services = ['vote', 'result', 'worker', 'seed-data']
                            services.each { service ->
                                logToLogstash('INFO', "Construyendo imagen Docker para ${service} en ${APP_DIR}/${service}")
                                buildDockerImage(service, "${APP_DIR}/${service}")
                            }

                        

                            def endTime = System.currentTimeMillis() as long
                            def formattedDuration = formatTimeDifference(startTime, endTime)
                            logToLogstash('INFO', "Construcción de imágenes Docker completada en ${formattedDuration}")
                        } catch (Exception e) {
                            logToLogstash('ERROR', "Error en la construcción de imágenes Docker: ${e.message}")
                            error("Falló la construcción de imágenes Docker")
                        }
                    }
                }
            }

            stage('Generar y Publicar Imágenes con Tag') {
                steps {
                    script {
                        try {
                            logToLogstash('INFO', "Iniciando la generación y publicación de imágenes con tag")
                            def startTime = System.currentTimeMillis() as long

                            def commitHash = getGitCommitHash(APP_DIR)
                            def currentDate = getCurrentDate()
                            env.DOCKER_IMAGE_TAG = "${currentDate}_${commitHash}".replaceAll(/[^a-zA-Z0-9._-]/, '')
                            logToLogstash('INFO', "Tag de la imagen Docker generado: ${DOCKER_IMAGE_TAG}")

                            def services = ['vote', 'result', 'worker', 'seed-data']
                            services.each { service ->
                                logToLogstash('INFO', "Generando y publicando imagen Docker para ${service}")
                                tagAndPushDockerImage(service)
                            }

                            logToLogstash('INFO', "Registrando el tag ${DOCKER_IMAGE_TAG} en ${DEPLOY_LOG}")
                            sh "echo ${DOCKER_IMAGE_TAG} >> ${DEPLOY_LOG}"

                            def endTime = System.currentTimeMillis() as long
                            def formattedDuration = formatTimeDifference(startTime, endTime)
                            logToLogstash('INFO', "Generación y publicación de imágenes completada en ${formattedDuration}")
                        } catch (Exception e) {
                            logToLogstash('ERROR', "Error en la generación y publicación de imágenes: ${e.message}")
                            error("Falló la generación y publicación de imágenes")
                        }
                    }
                }
            }

            stage('Despliegue') {
                steps {
                    script {
                        try {
                            
                            logToLogstash('INFO', "Iniciando el despliegue")
                            def startTime = System.currentTimeMillis() as long

                            cleanGitRepo(DOCKER_FILES_DIR)
                            logToLogstash('INFO', "Repositorio limpiado, actualizando docker-compose.yml")

                            updateDockerComposeTags()
                            stopExistingContainers()

                            // Llamada a la función para eliminar imágenes antiguas
                            deleteOldDockerImages()

                            startNewDeployment()

                    
                            def endTime = System.currentTimeMillis()
                            def formattedDuration = formatTimeDifference(startTime, endTime)
                            logToLogstash('INFO', "Despliegue completado en ${formattedDuration}")
                        } catch (Exception e) {
                            logToLogstash('ERROR', "Error en el despliegue: ${e.message}")
                            error("Falló el despliegue")
                        }
                    }
                }
            }

            stage('Commit y Push de Cambios') {
                when {
                    expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
                }
                steps {
                    script {
                        try {
                            logToLogstash('INFO', "Iniciando el commit y push de cambios")
                            def startTime = System.currentTimeMillis() as long

                            commitAndPushChanges(DOCKER_FILES_DIR, 'docker-compose.yml', "Actualizado docker-compose.yml con tag ${DOCKER_IMAGE_TAG}")

                            def endTime = System.currentTimeMillis() as long
                            def formattedDuration = formatTimeDifference(startTime, endTime)
                            logToLogstash('INFO', "Commit y push de cambios completado en ${formattedDuration}")
                        } catch (Exception e) {
                            logToLogstash('ERROR', "Error en el commit y push de cambios: ${e.message}")
                            error("Falló el commit y push de cambios")
                        }
                    }
                }
            }

            
            
        }

        post {
            failure {
                script {
                    
                
                    stopExistingContainers()

                    // Llamada a la función para eliminar imágenes antiguas
                    deleteOldDockerImages()
                    logToLogstash('ERROR', "El despliegue falló. Revirtiendo cambios en docker-compose.yml")
                    withCredentials([usernamePassword(credentialsId: 'nexus-credentials-id', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                        sh """
                            echo $NEXUS_PASSWORD | docker login -u $NEXUS_USERNAME --password-stdin http://${DOCKER_REGISTRY}
                        """
                        rollbackChanges(DOCKER_FILES_DIR)
                    }
                    
                }
            }
        }
    }

    // Funciones auxiliares
    def cloneOrUpdateRepo(repoDir, repoUrl) {
        try {
            withCredentials([usernamePassword(credentialsId: 'github-credentials-id', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                if (fileExists(repoDir)) {
                    if (fileExists("${repoDir}/.git")) {
                        dir(repoDir) {
                            sh 'git pull origin main'
                        }
                    } else {
                        sh "rm -rf ${repoDir}"
                        sh "git clone ${repoUrl} ${repoDir}"
                    }
                } else {
                    sh "git clone ${repoUrl} ${repoDir}"
                }
            }
            logToLogstash('INFO', "Repositorio ${repoDir} actualizado/clonado con éxito")
        } catch (Exception e) {
            logToLogstash('ERROR', "Error en la clonación o actualización del repositorio ${repoDir}: ${e.message}")
            throw e
        }
    }

    def buildDockerImage(service, dir) {
        try {
            sh "docker build -t ${DOCKER_IMAGE_PREFIX}-${service}:latest -f ${dir}/Dockerfile ${dir}"
            logToLogstash('INFO', "Imagen Docker para ${service} construida con éxito")
        } catch (Exception e) {
            logToLogstash('ERROR', "Error al construir la imagen Docker para ${service}: ${e.message}")
            throw e
        }
    }

    def tagAndPushDockerImage(service) {
        def imageName       = "${DOCKER_IMAGE_PREFIX}-${service}"
        def taggedImageName = "${DOCKER_REGISTRY}/${imageName}:${DOCKER_IMAGE_TAG}"

        try {
            sh "docker tag ${imageName}:latest ${taggedImageName}"
            logToLogstash('INFO', "Imagen Docker ${taggedImageName} etiquetada con éxito")

            withCredentials([usernamePassword(credentialsId: 'nexus-credentials-id', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                sh "echo $NEXUS_PASSWORD | docker login -u $NEXUS_USERNAME --password-stdin http://${DOCKER_REGISTRY}"
                sh "docker push ${taggedImageName}"
                logToLogstash('INFO', "Imagen Docker ${taggedImageName} publicada con éxito")
            }
        } catch (Exception e) {
            logToLogstash('ERROR', "Error al publicar la imagen Docker ${taggedImageName}: ${e.message}")
            throw e
        }
    }

    def getGitCommitHash(repoDir) {
        try {
            def commitHash = sh(returnStdout: true, script: "cd ${repoDir} && git log -1 --pretty=format:%h").trim()
            logToLogstash('INFO', "Hash del commit obtenido: ${commitHash}")
            return commitHash
        } catch (Exception e) {
            logToLogstash('ERROR', "Error al obtener el hash del commit: ${e.message}")
            throw e
        }
    }

    def getCurrentDate() {
        try {
            def currentDate = new Date().format('yyyyMMdd')
            logToLogstash('INFO', "Fecha actual obtenida: ${currentDate}")
            return currentDate
        } catch (Exception e) {
            logToLogstash('ERROR', "Error al obtener la fecha actual: ${e.message}")
            throw e
        }
    }

    def updateDockerComposeTags() {
        try {
            def composeFilePath   = "${DOCKER_FILES_DIR}/docker-compose.yml"
            def composeFile       = readFile composeFilePath
            def updatedComposeFile = composeFile.replaceAll('example-voting-app-\\w+:.*', { match ->
                def serviceName = match.split(':')[0]
                return "${serviceName}:${DOCKER_IMAGE_TAG}"
            })
            writeFile file: composeFilePath, text: updatedComposeFile
            logToLogstash('INFO', "Tags en docker-compose.yml actualizados con éxito")
        } catch (Exception e) {
            logToLogstash('ERROR', "Error al actualizar tags en docker-compose.yml: ${e.message}")
            throw e
        }
    }

    def stopExistingContainers() {
        try {
            logToLogstash('INFO', "Deteniendo y eliminando contenedores existentes que utilizan imágenes antiguas")
            def containersToRemove = []

            // Usar el patrón de nombres proporcionado: 'docker-files-*'
            def containersOutput = sh(returnStdout: true, script: """
                docker ps -a --filter 'name=docker-files-' --format '{{.ID}} {{.Image}}'
            """).trim()

            if (containersOutput) {
                containersOutput.split('\\n').each { line ->
                    def parts = line.split(' ')
                    if (parts.length >= 1) {
                        def containerId = parts[0]
                        containersToRemove << containerId
                    }
                }
            }

            if (containersToRemove) {
                containersToRemove.unique().each { containerId ->
                    sh "docker rm -f ${containerId}"
                    logToLogstash('INFO', "Contenedor ${containerId} detenido y eliminado")
                }
            } else {
                logToLogstash('INFO', "No se encontraron contenedores para detener")
            }
        } catch (Exception e) {
            logToLogstash('ERROR', "Error al detener contenedores existentes: ${e.message}")
            throw e
        }
    }

    def startNewDeployment() {
        try {
            sh "docker compose -f ${DOCKER_FILES_DIR}/docker-compose.yml up -d"
            logToLogstash('INFO', "Nuevo despliegue iniciado con éxito")
        } catch (Exception e) {
            logToLogstash('ERROR', "Error al iniciar el nuevo despliegue: ${e.message}")
            throw e
        }
    }

    def commitAndPushChanges(repoDir, fileName, commitMessage) {
        try {
            withCredentials([usernamePassword(credentialsId: 'github-credentials-id', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                def repoUrl = "https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/gerardo-lopez-dev-gh/docker-files.git"

                dir(repoDir) {
                    echo "Directorio actual: ${pwd()}"
                    
                    sh "git add ${fileName}"

                    def remoteUrl = sh(returnStdout: true, script: 'git config --get remote.origin.url').trim()
                    if (!remoteUrl) {
                        sh "git remote add origin ${repoUrl}"
                    } else {
                        sh "git remote set-url origin ${repoUrl}"
                    }

                    sh "git add -A"
                    sh "git commit -m '${commitMessage}' || echo 'No changes to commit'"
                    sh "git push origin main"
                }
            }

            logToLogstash('INFO', "Commit y push de cambios completado en ${fileName}")
        } catch (Exception e) {
            logToLogstash('ERROR', "Error en el commit y push de cambios: ${e.message}")
            throw e
        }
    }

    def rollbackChanges(repoDir) {
        try {
            if (!fileExists(repoDir)) {
                logToLogstash('ERROR', "El directorio ${repoDir} no existe")
                return
            }

            logToLogstash('ERROR', "Revirtiendo cambios en ${repoDir} debido a fallo en despliegue")

            dir(repoDir) {
                // Capturar código de salida de 'git reset'
                def resetExitCode = sh(script: 'git reset --hard HEAD', returnStatus: true)
                if (resetExitCode != 0) {
                    logToLogstash('ERROR', "git reset falló con código: ${resetExitCode}")
                    return
                }

                // Capturar código de salida de 'git clean'
                def cleanExitCode = sh(script: 'git clean -fd', returnStatus: true)
                if (cleanExitCode != 0) {
                    logToLogstash('ERROR', "git clean falló con código: ${cleanExitCode}")
                    return
                }

                // Capturar código de salida de 'docker compose'
                def dockerExitCode = sh(script: "docker compose -f docker-compose.yml up -d", returnStatus: true)
                if (dockerExitCode != 0) {
                    logToLogstash('ERROR', "docker compose falló con código: ${dockerExitCode}")
                    return
                }
            }

            logToLogstash('INFO', "Cambios revertidos y contenedores restaurados")
        } catch (Exception e) {
            logToLogstash('ERROR', "Error al revertir cambios: ${e.message}")
            throw e
        }
    }


    def formatTimeDifference(startTime, endTime) {
        def duration = (endTime - startTime) as long
        try {
            def hours = Math.floorDiv(duration, 1000 * 60 * 60) % 24
            def minutes = Math.floorDiv(duration, 1000 * 60) % 60
            def seconds = Math.floorDiv(duration, 1000) % 60
            def millis = duration % 1000
            def formattedTime = String.format("%02d:%02d:%02d.%03d", hours, minutes, seconds, millis)
            return formattedTime
        } catch (Exception e) {
            logToLogstash('ERROR', "Error al calcular la diferencia de tiempo: ${e.message}")
            throw e
        }
    }

    def cleanGitRepo(repoDir) {
        dir(repoDir) {
            sh 'git reset --hard'
            sh 'git clean -fd'
            logToLogstash('INFO', "Repositorio ${repoDir} limpiado con éxito")
        }
    }


    def deleteOldDockerImages() {
        try {
            logToLogstash('INFO', "Iniciando la eliminación de imágenes antiguas")
            def startTime = System.currentTimeMillis() as long

            def services = ['vote', 'result', 'worker', 'seed-data']
            def imagesToDelete = []

            services.each { service ->
                def imagePattern = "${DOCKER_REGISTRY}/${DOCKER_IMAGE_PREFIX}-${service}"

                // Obtener todas las etiquetas de la imagen, excluyendo la actual
                def imagesOutput = sh(returnStdout: true, script: """
                    docker images --format '{{.Repository}}:{{.Tag}} {{.ID}}' | grep '^${imagePattern}:' | grep -v ':${DOCKER_IMAGE_TAG}\$' || true
                """).trim()

                if (imagesOutput) {
                    imagesOutput.split('\\n').each { line ->
                        def parts = line.split(' ')
                        if (parts.length == 2) {
                            def imageId = parts[1]
                            imagesToDelete << imageId
                        }
                    }
                }
            }

            if (imagesToDelete) {
                imagesToDelete.unique().each { imageId ->
                    try {
                        sh "docker rmi -f ${imageId}"
                        logToLogstash('INFO', "Imagen ${imageId} eliminada")
                    } catch (Exception e) {
                        logToLogstash('ERROR', "Error al eliminar la imagen ${imageId}: ${e.message}")
                    }
                }
            } else {
                logToLogstash('INFO', "No hay imágenes antiguas para eliminar")
            }

            def endTime = System.currentTimeMillis() as long
            def formattedDuration = formatTimeDifference(startTime, endTime)
            logToLogstash('INFO', "Eliminación de imágenes antiguas completada en ${formattedDuration}")
        } catch (Exception e) {
            logToLogstash('ERROR', "Error al eliminar imágenes antiguas: ${e.message}")
            throw e
        }
    }

    def logToLogstash(logLevel, message) {
        def timestamp    = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
        def deploymentId = DEPLOYMENT_ID

        // Construir el mensaje JSON interno
        def innerJsonMessage = """
        {
            "timestamp": "${timestamp}",
            "deployment_id": "${deploymentId}",
            "nivel": "${logLevel}",
            "mensaje": "${message.replaceAll('"', '\\\\"')}"
        }
        """.stripIndent().trim()

        // Escapar el mensaje JSON interno
        def escapedInnerJsonMessage = innerJsonMessage.replaceAll('"', '\\\\"')

        // Construir el mensaje JSON final con event.original
        def jsonMessage = """
        {
            "event": {
                "original": "${escapedInnerJsonMessage}"
            }
        }
        """.stripIndent().trim()

        // Escribir y enviar el mensaje
        writeFile(file: 'log_message.json', text: jsonMessage, encoding: 'UTF-8')
        sh "curl -X POST -H 'Content-Type: application/json; charset=UTF-8' -d @log_message.json http://${LOGSTASH_HOST}:${LOGSTASH_PORT}"
    }


        

