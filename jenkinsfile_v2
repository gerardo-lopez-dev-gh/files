    pipeline {
        agent any

        parameters {
            text(name: 'CONFIG_JSON', defaultValue: '{}', description: 'JSON con la configuración del pipeline')
        }

        environment {
            DEPLOYMENT_ID = UUID.randomUUID().toString()
        }

        stages {

            stage('Guardar datos de repositorio sin build') {
                steps {
                    script {
                        def config = readJSON text: params.CONFIG_JSON
                        def noBuildRepo = config.repos.find { !it.build }

                        if (noBuildRepo) {
                            env.NO_BUILD_REPO_DIR = noBuildRepo.dir
                            env.NO_BUILD_REPO_URL = noBuildRepo.url
                            env.NO_BUILD_REPO_USER = noBuildRepo.user
                            env.NO_BUILD_REPO_CORREO = noBuildRepo.correo
                            env.INDEX_LOG = config.logstash.index
                            logToLogstash('INFO', "Datos del repositorio sin build guardados: ${noBuildRepo.dir}, ${noBuildRepo.url}", config.logstash.host, config.logstash.port)
                        } else {
                            logToLogstash('INFO', "No se encontró ningún repositorio con build=false", config.logstash.host, config.logstash.port)
                        }
                    }
                }
            }
            stage('Preparar Repositorios') {
                steps {
                    script {
                           def config = readJSON text: params.CONFIG_JSON
                        try {
                            
                            def repos = config.repos
                            
                            logToLogstash('INFO', "Iniciando la preparación de los repositorios", config.logstash.host, config.logstash.port)

                            

                            repos.each { repo ->
                                logToLogstash('INFO', "Iniciando la preparación del repositorio en ${repo.dir}", config.logstash.host, config.logstash.port)
                                cloneOrUpdateRepo(repo.dir, repo.url, config.logstash.host, config.logstash.port)
                                logToLogstash('INFO', "Repositorio ${repo.dir} preparado con éxito.", config.logstash.host, config.logstash.port)
                            }
                            
                            
                            logToLogstash('INFO', "Preparación de los repositorios completada ", config.logstash.host, config.logstash.port)
                        } catch (Exception e) {
                            logToLogstash('ERROR', "Error en la preparación de repositorios: ${e.message}", config.logstash.host, config.logstash.port)
                            error("Falló la preparación de repositorios")
                        }
                    }
                }
            }

            
            stage('Construir Imágenes Docker') {
                steps {
                    script {
                        def deploymentData
                        try {
                            deploymentData = readJSON text: params.CONFIG_JSON
                            logToLogstash('INFO', "Iniciando la construcción de imágenes Docker", deploymentData.logstash.host, deploymentData.logstash.port)
                        } catch (Exception e) {
                            error("Error leyendo el archivo JSON de configuración: ${e.message}")
                        }

                        deploymentData.repos.each { repo ->
                            if (repo.build) {
                                def directories = repo.dockerfileDirs ? (repo.dockerfileDirs instanceof List ? repo.dockerfileDirs : [repo.dockerfileDirs]) : [repo.dir]
                                directories.each { dockerfileDir ->
                                    def cleanServiceName = dockerfileDir == "." ? 'root' : dockerfileDir.replaceAll(/[^a-zA-Z0-9_-]/, '')
                                    def dockerfilePath = repo.dockerfileDirs 
                                        ? (dockerfileDir == "." ? "${repo.dir}/Dockerfile" : "${repo.dir}/${dockerfileDir}/Dockerfile")
                                        : "${repo.dir}/Dockerfile"

                                    if (!fileExists(dockerfilePath)) {
                                        logToLogstash('ERROR', "1- Dockerfile no encontrado en ${dockerfilePath}", deploymentData.logstash.host, deploymentData.logstash.port)
                                        error("Dockerfile no encontrado en ${dockerfilePath}")
                                    }

                                    logToLogstash('INFO', "Construyendo imagen Docker para servicio: ${cleanServiceName}, usando Dockerfile en ${dockerfilePath}", deploymentData.logstash.host, deploymentData.logstash.port)
                                    try {
                                        buildDockerImage(cleanServiceName, dockerfilePath, deploymentData.logstash.host, deploymentData.logstash.port, deploymentData.docker.imagePrefix)
                                    } catch (Exception e) {
                                        logToLogstash('ERROR', "Error al construir imagen Docker para servicio: ${cleanServiceName}: ${e.message}", deploymentData.logstash.host, deploymentData.logstash.port)
                                        throw e
                                    }
                                }
                            } else {
                                logToLogstash('INFO', "Saltando construcción de imagen Docker para ${repo.dir}", deploymentData.logstash.host, deploymentData.logstash.port)
                            }
                        }

                        logToLogstash('INFO', "Construcción de imágenes Docker completada", deploymentData.logstash.host, deploymentData.logstash.port)
                    }
                }
            }




            stage('Publicar Imágenes con Tag') {
                steps {
                    script {
                        def deploymentData
                        try {
                            deploymentData = readJSON text: params.CONFIG_JSON
                            logToLogstash('INFO', "Iniciando la generación y publicación de imágenes con tag", deploymentData.logstash.host, deploymentData.logstash.port)

                            deploymentData.repos.each { repo ->
                                if (repo.build) {
                                    def directories = repo.dockerfileDirs ? 
                                        (repo.dockerfileDirs instanceof List ? repo.dockerfileDirs : [repo.dockerfileDirs]) 
                                        : [repo.dir]

                                    // Generar el tag de la imagen al nivel del repositorio
                                    def commitHash = getGitCommitHash(repo.dir, deploymentData.logstash.host, deploymentData.logstash.port)
                                    def currentDate = getCurrentDate(deploymentData.logstash.host, deploymentData.logstash.port)
                                    def docker_image_tag = "${currentDate}_${commitHash}".replaceAll(/[^a-zA-Z0-9._-]/, '')

                                    logToLogstash('INFO', "Tag de la imagen Docker generado: ${docker_image_tag}", deploymentData.logstash.host, deploymentData.logstash.port)

                                    directories.each { dockerfileDir ->
                                        def cleanServiceName = dockerfileDir == "." ? 'root' : dockerfileDir.replaceAll(/[^a-zA-Z0-9_-]/, '')
                                        def dockerfilePath = repo.dockerfileDirs 
                                            ? (dockerfileDir == "." ? "${repo.dir}/Dockerfile" : "${repo.dir}/${dockerfileDir}/Dockerfile")
                                            : "${repo.dir}/Dockerfile"

                                        if (!fileExists(dockerfilePath)) {
                                            logToLogstash('ERROR', "Dockerfile no encontrado en ${dockerfilePath}", deploymentData.logstash.host, deploymentData.logstash.port)
                                            error("Dockerfile no encontrado en ${dockerfilePath}")
                                        }

                                        logToLogstash('INFO', "Generando y publicando imagen Docker para ${deploymentData.docker.imagePrefix}/${dockerfileDir}", deploymentData.logstash.host, deploymentData.logstash.port)

                                        try {
                                            tagAndPushDockerImage(
                                                deploymentData.docker.imagePrefix,
                                                dockerfileDir,
                                                docker_image_tag,
                                                deploymentData.docker.registry,
                                                deploymentData.logstash.host,
                                                deploymentData.logstash.port
                                            )
                                        } catch (Exception e) {
                                            logToLogstash('ERROR', "Error al generar y publicar la imagen Docker para ${cleanServiceName}: ${e.message}", deploymentData.logstash.host, deploymentData.logstash.port)
                                            throw e
                                        }

                                        updateDockerComposeTags(
                                            dockerfileDir,
                                            deploymentData.docker.imagePrefix,
                                            env.NO_BUILD_REPO_DIR,
                                            deploymentData.logstash.host,
                                            deploymentData.logstash.port,
                                            docker_image_tag
                                        )
                                    }

                                    stopExistingContainers(deploymentData.logstash.host, deploymentData.logstash.port)

                                    // Usar el mismo docker_image_tag para la eliminación de imágenes antiguas
                                    try {
                                        logToLogstash('INFO', "Comenzamos con el delete", deploymentData.logstash.host, deploymentData.logstash.port)
                                        deleteOldDockerImages(
                                            deploymentData.docker.registry,
                                            deploymentData.docker.imagePrefix,
                                            deploymentData,
                                            deploymentData.logstash.host,
                                            deploymentData.logstash.port,
                                            docker_image_tag
                                        )
                                    } catch (Exception e) {
                                        logToLogstash('ERROR', "Error antes de llamar a deleteOldDockerImages: ${e.message}", deploymentData.logstash.host, deploymentData.logstash.port)
                                        error("Error antes de llamar a deleteOldDockerImages")
                                    }

                                } else {
                                    logToLogstash('INFO', "Saltando publicación de imágenes Docker para ${repo.dir}", deploymentData.logstash.host, deploymentData.logstash.port)
                                }
                            }

                            logToLogstash('INFO', "Generación y publicación de imágenes completada", deploymentData.logstash.host, deploymentData.logstash.port)
                        } catch (Exception e) {
                            logToLogstash('ERROR', "Error en la generación y publicación de imágenes: ${e.message}", deploymentData.logstash.host, deploymentData.logstash.port)
                            error("Falló la generación y publicación de imágenes")
                        }
                    }
                }
            }





            stage('Despliegue') {
                steps {
                    script {
                        // Leer el JSON desde el parámetro
                        def deploymentData = readJSON text: params.CONFIG_JSON
                        try {
                            // Iniciar despliegue
                            logToLogstash('INFO', "Iniciando el despliegue para deploymentId ${DEPLOYMENT_ID}", deploymentData.logstash.host, deploymentData.logstash.port)
                            
                            // Iterar sobre los repositorios en el JSON
                            deploymentData.repos.each { repo ->
                                if (!repo.build) {
                                    //Iniciar despliegue de nuevas imágenes
                                    startNewDeployment(repo.dir, deploymentData.logstash.host, deploymentData.logstash.port)
                                   
                                    
                                } 
                            }
                            
                            logToLogstash('INFO', "Despliegue completado para deploymentId ${deploymentData.deploymentId}", deploymentData.logstash.host, deploymentData.logstash.port)
                        } catch (Exception e) {
                            logToLogstash('ERROR', "Error en el despliegue: ${e.message}", deploymentData.logstash.host, deploymentData.logstash.port)
                            error("Falló el despliegue")
                        }
                    }
                }
            }

            stage('Commit y Push de Cambios') {
                when {
                    expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
                }
                steps {
                    script {
                        def deploymentData = readJSON text: params.CONFIG_JSON
                        try {
                            
                            logToLogstash('INFO', "Iniciando el commit y push de cambios",  deploymentData.logstash.host, deploymentData.logstash.port)
                            commitAndPushChanges(env.NO_BUILD_REPO_DIR, env.NO_BUILD_REPO_URL, env.NO_BUILD_REPO_USER, env.NO_BUILD_REPO_CORREO, 'docker-compose.yml', "Actualizado docker-compose.yml con tag de imagen", deploymentData.logstash.host, deploymentData.logstash.port)
                            logToLogstash('INFO', "Commit y push de cambios completado",  deploymentData.logstash.host, deploymentData.logstash.port)
                        } catch (Exception e) {
                            logToLogstash('ERROR', "Error en el commit y push de cambios: ${e.message}", deploymentData.logstash.host, deploymentData.logstash.port)
                            error("Falló el commit y push de cambios")
                        }
                    }
                }
            }


        }
        post {
            failure {
                script {
                    
                    def deploymentData = readJSON text: params.CONFIG_JSON
                    logToLogstash('INFO', "Iniciando Rollback", deploymentData.logstash.host, deploymentData.logstash.port)
                    stopExistingContainers(deploymentData.logstash.host, deploymentData.logstash.port)
                    logToLogstash('ERROR', "El despliegue falló. Revirtiendo cambios en docker-compose.yml", deploymentData.logstash.host, deploymentData.logstash.port)
                    withCredentials([usernamePassword(credentialsId: 'nexus-credentials-id', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                        logToLogstash('INFO', "NEXUS LOGIN", deploymentData.logstash.host, deploymentData.logstash.port)
                        rollbackChanges(env.NO_BUILD_REPO_DIR, deploymentData.logstash.host, deploymentData.logstash.port)
                    }
                    
                }
            }
        }
    }
    
    

    // Funciones auxiliares
    def cloneOrUpdateRepo(repoDir, repoUrl, host, port) {
    try {
        withCredentials([usernamePassword(credentialsId: 'github-credentials-id', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
            // Validar que repoDir no esté vacío
            if (!repoDir?.trim()) {
                logToLogstash('ERROR', "El valor de repoDir es inválido o está vacío", host, port)
                throw new IllegalArgumentException("El valor de repoDir no puede estar vacío")
            }

            // Validar si el directorio existe
            if (fileExists(repoDir)) {
                if (fileExists("${repoDir}/.git")) {
                    dir(repoDir) {
                        logToLogstash('INFO', "Repositorio encontrado, actualizando...", host, port)
                        sh 'git pull origin main'
                    }
                } else {
                    logToLogstash('INFO', "Directorio encontrado pero no es un repositorio Git. Eliminando...", host, port)
                    sh "rm -rf ${repoDir}"
                    sh "git clone ${repoUrl} "
                }
            } else {
                logToLogstash('INFO', "Directorio no encontrado, clonando repositorio...", host, port)
                sh "git clone ${repoUrl}"
            }
        }
        logToLogstash('INFO', "Repositorio ${repoDir} actualizado/clonado con éxito", host, port)
    } catch (Exception e) {
        logToLogstash('ERROR', "Error en la clonación o actualización del repositorio ${repoDir}: ${e.message}", host, port)
        throw e
    }
}

    def buildDockerImage(service, dockerfilePath, host, port, docker_image_prefix) {
    try {
        // Validar variables de entrada
        if (!service?.trim()) {
            logToLogstash('ERROR', "El parámetro 'service' está vacío o es nulo", host, port)
            error("El parámetro 'service' es obligatorio y no puede ser nulo.")
        }
        if (!dockerfilePath?.trim()) {
            logToLogstash('ERROR', "El parámetro 'dockerfilePath' está vacío o es nulo", host, port)
            error("El parámetro 'dockerfilePath' es obligatorio y no puede ser nulo.")
        }

        def cleanServiceName = service == "." ? "root" : service.replaceAll(/[^a-zA-Z0-9_-]/, '')
        def imageName = "${docker_image_prefix}-${cleanServiceName}"
        
        // Validar formato de dockerfilePath
        def buildContext
        if (dockerfilePath.contains('/Dockerfile')) {
            buildContext = dockerfilePath.replace('/Dockerfile', '')
        } else {
            buildContext = dockerfilePath
        }

        if (!fileExists(dockerfilePath)) {
            logToLogstash('ERROR', "Dockerfile no encontrado en la ruta: ${dockerfilePath}", host, port)
            error("Dockerfile no encontrado en ${dockerfilePath}. Verifica la configuración.")
        }

        // Log de inicio de construcción
        logToLogstash('INFO', "Iniciando la construcción de la imagen ${imageName}:latest usando ${dockerfilePath}", host, port)

        // Construcción de la imagen Docker
        sh """
            docker build -t ${imageName}:latest -f ${dockerfilePath} ${buildContext}
        """
        logToLogstash('INFO', "Imagen Docker ${imageName}:latest construida con éxito", host, port)

        // Validar si la imagen fue creada
        def imageExists = sh(returnStdout: true, script: "docker images -q ${imageName}:latest").trim()
        if (!imageExists) {
            logToLogstash('ERROR', "La imagen ${imageName}:latest no fue creada correctamente", host, port)
            error("La imagen ${imageName}:latest no fue creada correctamente.")
        }

    } catch (Exception e) {
        logToLogstash('ERROR', "Error al construir la imagen Docker para ${service}: ${e.message}", host, port)
        throw e
    }
}




    def tagAndPushDockerImage(imagePrefix, service, docker_image_tag, registry, host, port) {
        try {
            def cleanServiceName = service == "." ? "root" : service.replaceAll(/[^a-zA-Z0-9_-]/, '')
            def imageName = "${imagePrefix}-${cleanServiceName}"
            def taggedImageName = "${registry}/${imageName}:${docker_image_tag}"

            // Etiquetar la imagen
            sh "docker tag ${imageName}:latest ${taggedImageName}"
            logToLogstash('INFO', "Imagen Docker ${taggedImageName} etiquetada con éxito", host, port)

            // Publicar la imagen en Nexus
            withCredentials([usernamePassword(credentialsId: 'nexus-credentials-id', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                sh "echo $NEXUS_PASSWORD | docker login -u $NEXUS_USERNAME --password-stdin http://${registry}"
                sh "docker push ${taggedImageName}"
            
            }
            logToLogstash('INFO', "Imagen Docker ${taggedImageName} publicada con éxito en Nexus", host, port)
        } catch (Exception e) {
            logToLogstash('ERROR', "Error al publicar la imagen Docker ${taggedImageName}: ${e.message}", host, port)
            throw e
        }
    }



    def getGitCommitHash(repoDir, host, port) {
        try {
            def commitHash = sh(returnStdout: true, script: "cd ${repoDir} && git log -1 --pretty=format:%h").trim()
            logToLogstash('INFO', "Hash del commit obtenido: ${commitHash}", host, port)
            return commitHash
        } catch (Exception e) {
            logToLogstash('ERROR', "Error al obtener el hash del commit: ${e.message}", host, port)
            throw e
        }
    }

    def getCurrentDate(host, port) {
        try {
            def currentDate = new Date().format('yyyyMMdd')
            logToLogstash('INFO', "Fecha actual obtenida: ${currentDate}", host, port)
            return currentDate
        } catch (Exception e) {
            logToLogstash('ERROR', "Error al obtener la fecha actual: ${e.message}", host, port)
            throw e
        }
    }

    def updateDockerComposeTags(servicio, imagePrefix, repoDir, host, port, docker_image_tag) {
        try {
            def composeFilePath = "${repoDir}/docker-compose.yml"
            def composeFile = readFile composeFilePath
            def serviceName = servicio == "." ? "root" : servicio

            // Reemplazar el tag en el archivo docker-compose.yml
            def updatedComposeFile = composeFile.replaceAll(
                "${imagePrefix}-${serviceName}:\\S+", 
                "${imagePrefix}-${serviceName}:${docker_image_tag}"
            )

            // Escribir el archivo actualizado
            writeFile file: composeFilePath, text: updatedComposeFile
            logToLogstash('INFO', "Archivo docker-compose.yml actualizado con el tag ${docker_image_tag}", host, port)
        } catch (Exception e) {
            logToLogstash('ERROR', "Error al actualizar docker-compose.yml: ${e.message}", host, port)
            throw e
        }
    }




    def stopExistingContainers(host, port) {
        try {
            logToLogstash('INFO', "Deteniendo y eliminando contenedores existentes que utilizan imágenes antiguas", host, port)
            def containersToRemove = []

            def containersOutput = sh(returnStdout: true, script: """
                docker ps -a --filter 'name=docker-files-' --format '{{.ID}} {{.Image}}'
            """).trim()

            if (containersOutput) {
                containersOutput.split('\\n').each { line ->
                    def parts = line.split(' ')
                    if (parts.length >= 1) {
                        def containerId = parts[0]
                        containersToRemove << containerId
                    }
                }
            }

            if (containersToRemove) {
                containersToRemove.unique().each { containerId ->
                    sh "docker rm -f ${containerId}"
                    logToLogstash('INFO', "Contenedor ${containerId} detenido y eliminado", host, port)
                }
            } else {
                logToLogstash('INFO', "No se encontraron contenedores para detener", host, port)
            }
        } catch (Exception e) {
            logToLogstash('ERROR', "Error al detener contenedores existentes: ${e.message}", host, port)
            throw e
        }
    }


    def startNewDeployment(repoDir, host, port) {
        try {
            sh "docker compose -f  ${repoDir}/docker-compose.yml up -d"
            logToLogstash('INFO', "Nuevo despliegue iniciado con éxito", host, port)
        } catch (Exception e) {
            logToLogstash('ERROR', "Error al iniciar el nuevo despliegue: ${e.message}", host, port)
            throw e
        }
    }

    def commitAndPushChanges(repoDir, repoUrl, name, correo,  fileName, commitMessage, host, port) {
    try {
        withCredentials([usernamePassword(credentialsId: 'github-credentials-id', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
            logToLogstash('INFO', "Commit y push de cambios en ${repoDir}", host, port)
            dir(repoDir) {
                echo "Directorio actual: ${pwd()}"
                
                sh "git add ${fileName}"
                // Configurar identidad del usuario
                sh "git config user.email ${correo}"
                sh "git config user.name ${name}"

                def remoteUrl = sh(returnStdout: true, script: 'git config --get remote.origin.url').trim()
                if (!remoteUrl) {
                    sh "git remote add origin ${repoUrl}"
                } else {
                    sh "git remote set-url origin ${repoUrl}"
                }

                

                sh "git add -A"
                sh "git commit -m '${commitMessage}' || echo 'No changes to commit'"
                
                // Incluir usuario y contraseña en la URL para autenticación
                sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${name}/${repoDir}.git main"

            }
        }

        logToLogstash('INFO', "Commit y push de cambios completado en ${fileName}", host, port)
    } catch (Exception e) {
        logToLogstash('ERROR', "Error en el commit y push de cambios: ${e.message}", host, port)
        throw e
    }
}


    def rollbackChanges(repoDir, host, port) {
        try {
            if (!fileExists(repoDir)) {
                logToLogstash('ERROR', "El directorio ${repoDir} no existe", host, port)
                return
            }

            logToLogstash('ERROR', "Revirtiendo cambios en ${repoDir} debido a fallo en despliegue", host, port)

            dir(repoDir) {
                // Capturar código de salida de 'git reset'
                def resetExitCode = sh(script: 'git reset --hard HEAD', returnStatus: true)
                if (resetExitCode != 0) {
                    logToLogstash('ERROR', "git reset falló con código: ${resetExitCode}", host, port)
                    return
                }

                // Capturar código de salida de 'git clean'
                def cleanExitCode = sh(script: 'git clean -fd', returnStatus: true)
                if (cleanExitCode != 0) {
                    logToLogstash('ERROR', "git clean falló con código: ${cleanExitCode}", host, port)
                    return
                }

                // Capturar código de salida de 'docker compose'
                def dockerExitCode = sh(script: "docker compose -f docker-compose.yml up -d", returnStatus: true)
                if (dockerExitCode != 0) {
                    logToLogstash('ERROR', "docker compose falló con código: ${dockerExitCode}", host, port)
                    return
                }
            }

            logToLogstash('INFO', "Cambios revertidos y contenedores restaurados", host, port)
        } catch (Exception e) {
            logToLogstash('ERROR', "Error al revertir cambios: ${e.message}", host, port)
            throw e
        }
    }


    def formatTimeDifference(startTime, endTime, host, port) {
        def duration = (endTime - startTime) as long
        try {
            def hours = Math.floorDiv(duration, 1000 * 60 * 60) % 24
            def minutes = Math.floorDiv(duration, 1000 * 60) % 60
            def seconds = Math.floorDiv(duration, 1000) % 60
            def millis = duration % 1000
            def formattedTime = String.format("%02d:%02d:%02d.%03d", hours, minutes, seconds, millis)
            return formattedTime
        } catch (Exception e) {
            logToLogstash('ERROR', "Error al calcular la diferencia de tiempo: ${e.message}", host, port)
            throw e
        }
    }

    def cleanGitRepo(repoDir, host, port) {
        dir(repoDir) {
            sh 'git reset --hard'
            sh 'git clean -fd'
            logToLogstash('INFO', "Repositorio ${repoDir} limpiado con éxito", host, port)
        }
    }


    def deleteOldDockerImages(registry, imagePrefix, deploymentData, host, port, docker_image_tag) {
        try {
            logToLogstash('INFO', "Iniciando la eliminación de imágenes antiguas", host, port)
            def imagesToDelete = []

            // Iterar por cada repositorio en deploymentData
            deploymentData.repos.each { repo ->
                logToLogstash('INFO', "Procesando repositorio: ${repo.dir}", host, port)
                if (repo.build) {
                    logToLogstash('INFO', "El repositorio ${repo.dir} está configurado para construcción. Buscando imágenes asociadas.", host, port)
                    
                    def services = repo.dockerfileDirs ? (repo.dockerfileDirs instanceof List ? repo.dockerfileDirs : [repo.dockerfileDirs]) : [repo.dir]
                    logToLogstash('INFO', "Servicios detectados en el repositorio ${repo.dir}: ${services}", host, port)

                    services.each { service ->
                        def imagePattern = "${registry}/${imagePrefix}-${service}"
                        logToLogstash('INFO', "Buscando imágenes antiguas para el patrón: ${imagePattern}, excluyendo la etiqueta actual: ${docker_image_tag}", host, port)

                        // Obtener todas las etiquetas de la imagen, excluyendo la actual
                        def imagesOutput = sh(returnStdout: true, script: """
                            docker images --format '{{.Repository}}:{{.Tag}} {{.ID}}' | grep '^${imagePattern}:' | grep -v ':${docker_image_tag}\$' || true
                        """).trim()

                        if (imagesOutput) {
                            logToLogstash('INFO', "Imágenes encontradas para el servicio ${service}:\n${imagesOutput}", host, port)
                            imagesOutput.split('\\n').each { line ->
                                def parts = line.split(' ')
                                if (parts.length == 2) {
                                    def imageId = parts[1]
                                    logToLogstash('INFO', "Agregando imagen a la lista de eliminación: ${line}", host, port)
                                    imagesToDelete << imageId
                                } else {
                                    logToLogstash('WARNING', "Formato inesperado en la línea de salida de imágenes: ${line}", host, port)
                                }
                            }
                        } else {
                            logToLogstash('INFO', "No se encontraron imágenes antiguas para el servicio: ${service}", host, port)
                        }
                    }
                } else {
                    logToLogstash('INFO', "El repositorio ${repo.dir} no está configurado para construcción. Saltando eliminación.", host, port)
                }
            }

            if (imagesToDelete) {
                logToLogstash('INFO', "Iniciando la eliminación de imágenes detectadas: ${imagesToDelete.unique()}", host, port)
                imagesToDelete.unique().each { imageId ->
                    try {
                        logToLogstash('INFO', "Eliminando imagen con ID: ${imageId}", host, port)
                        sh "docker rmi -f ${imageId}"
                        logToLogstash('INFO', "Imagen ${imageId} eliminada exitosamente", host, port)
                    } catch (Exception e) {
                        logToLogstash('ERROR', "Error al eliminar la imagen ${imageId}: ${e.message}", host, port)
                    }
                }
            } else {
                logToLogstash('INFO', "No hay imágenes antiguas para eliminar", host, port)
            }
        } catch (Exception e) {
            logToLogstash('ERROR', "Error al eliminar imágenes antiguas: ${e.message}", host, port)
            throw e
        }
    }





    def logToLogstash(logLevel, message, host, port) {
        def timestamp    = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
        def deploymentId = DEPLOYMENT_ID

        // Construir el mensaje JSON sin el envoltorio parsed_event
        def jsonMessage = [
            timestamp: timestamp,
            deployment_id: deploymentId,
            nivel: logLevel,
            mensaje: message,
            index: env.INDEX_LOG
        ]

        // Convertir el mensaje a un string JSON
        def jsonString = groovy.json.JsonOutput.toJson(jsonMessage)

        // Escribir y enviar el mensaje
        writeFile(file: 'log_message.json', text: jsonString, encoding: 'UTF-8')
        sh "curl -X POST -H 'Content-Type: application/json; charset=UTF-8' -d @log_message.json http://${host}:${port}"
    }





        

