pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = '172.21.0.3:8082' // Registro de Docker en Nexus usando el puerto 8082
        DOCKER_IMAGE_PREFIX = 'example-voting-app' // Prefijo para las imágenes Docker
    }

    stages {
        stage('Clone or Update Repository') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'github-credentials-id', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        def repoDir = 'example-voting-app'
                        def repoUrl = "https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/gerardo-lopez-dev-gh/example-voting-app.git"

                        if (fileExists(repoDir)) {
                            dir(repoDir) {
                                sh 'git pull origin main'
                            }
                        } else {
                            sh "git clone ${repoUrl}"
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    sh 'docker compose -f example-voting-app/docker-compose.yml build'
                }
            }
        }

        stage('List Docker Images') {
            steps {
                script {
                    // Lista todas las imágenes disponibles para verificar los nombres correctos
                    sh 'docker images'
                }
            }
        }

        stage('Generate Dynamic Tag') {
            steps {
                script {
                    dir('example-voting-app') {
                        def commitHash = sh(returnStdout: true, script: 'git log -1 --pretty=format:%h').trim()
                        def currentDate = sh(returnStdout: true, script: 'date "+%Y%m%d"').trim()
                        env.DOCKER_IMAGE_TAG = "${currentDate}_${commitHash}".replaceAll(/[^a-zA-Z0-9._-]/, '')
                    }
                }
            }
        }

        stage('Push Images to Nexus') {
            steps {
                script {
                    // Lista las imágenes disponibles para verificar los nombres correctos
                    def imageList = sh(returnStdout: true, script: 'docker images --format "{{.Repository}}:{{.Tag}}"').trim()
                    echo "Available images:\n${imageList}"

                    def services = ['vote', 'result', 'worker']
                    def taggedImages = []

                    services.each { service ->
                        def imageName = "${DOCKER_IMAGE_PREFIX}-${service}"
                        def fullImageName = imageList.split('\n').find { it.contains(imageName) }

                        if (fullImageName) {
                            def taggedImageName = "172.21.0.3:8082/${imageName}:${DOCKER_IMAGE_TAG}"
                            taggedImages << taggedImageName

                            echo "Tagging image: ${fullImageName} as ${taggedImageName}"
                            sh "docker tag ${fullImageName} ${taggedImageName}"
                        } else {
                            error "Image ${imageName} not found in the available images"
                        }
                    }

                    echo "Logging into Docker Registry at http://${DOCKER_REGISTRY}"
                    withCredentials([usernamePassword(credentialsId: 'nexus-credentials-id', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                        sh 'echo ${NEXUS_PASSWORD} | docker login -u ${NEXUS_USERNAME} --password-stdin http://${DOCKER_REGISTRY}'
                    }

                    taggedImages.each { taggedImageName ->
                        echo "Pushing image to registry: ${taggedImageName}"
                        sh "docker push ${taggedImageName}"
                    }
                }
            }
        }

        stage('Deploy Images from Nexus') {
            steps {
                script {
                    def services = ['vote', 'result', 'worker']
                    services.each { service ->
                        def taggedImageName = "172.21.0.3:8082/${DOCKER_IMAGE_PREFIX}-${service}:${DOCKER_IMAGE_TAG}"

                        echo "Deploying image: ${taggedImageName}"

                        sh """
                        docker pull ${taggedImageName}
                        docker run -d --name ${service} ${taggedImageName}
                        """
                    }
                }
            }
        }
    }
}
